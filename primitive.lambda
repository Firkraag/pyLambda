not = lambda (exp) if exp then false else true;
println = js "function (k, txt) {
    console.log(txt);
    k(false);
}";
print = js "function (k, txt) {
    process.stdout.write(txt + '');
    k(false);
}";
string = js "function (k, object) {
    k(object + '');
}";
fibpy = js "function (k, n) {
    const result = (function fib(n) {
        if (n < 2)
            return n;
        else {
            return fib(n - 1) + fib(n - 2);
        }
    })(n);
    k(result);
}";
sum = js "function (k, a, b) {
    k(a + b);
}";
time = js "function (k, func, ...args) {
    // console.log(k, func, args);
    args = [function (result) {
        console.timeEnd('timing');
        k(result);
    }].concat(args);
    console.time('timing');
    return func.apply(null, args);
}";

length = js "function(k, thing) {
    k(thing.length);
  }";

arrayRef = js "function(k, array, index) {
    k(array[index]);
  }";

arraySet = js "function(k, array, index, value) {
    k(array[index] = value);
  }";

forEach = Î»(array, f)
  let (n = length(array))
    let loop (i = 0)
      if (i < n) {
        f(arrayRef(array, i), i);
        loop(i + 1);
      };

readFile = js "function(k, filename) {
    let fs = require('fs');
    fs.readFile(filename, function(err, data){
      if (err) throw new Error(err);
      Execute(k, [data]);
      //k(data);
    });
}";

readDir = js "function(k, dirname) {
    let fs = require('fs');
    fs.readdir(dirname, function(err, files){
      if (err) throw new Error(err);
      Execute(k, [files]);
    });
  }";


stringStartsWith = js "function(k, str, prefix) {
    k(str.substr(0, prefix.length) === prefix);
  }";

pathJoin = js "function(k) {
    let path = require('path');
    k(path.join.apply(path, [].slice.call(arguments, 1)));
  }";
fstat = js "function(k, pathname) {
    let fs = require('fs');
    fs.stat(pathname, function(err, stat){
      if (err && err.code !== 'ENOENT') throw new Error(err);
      Execute(k, [err ? false : stat]);
    });
  }";
isDirectory = js "function(k, stat) {
    k(stat.isDirectory());
  }";
isFile = js "function(k, stat) {
    k(stat.isFile());
  }";
makeDir = js "function(k, dirname) {
    let fs = require('fs');
    fs.mkdir(dirname, function(err){
      if (err) throw new Error(err);
      Execute(k, [ false ]);
    });
  }";
lstat = js "function(k, pathname) {
    let fs = require('fs');
    fs.lstat(pathname, function(err, stat){
      if (err && err.code !== 'ENOENT') throw new Error(err);
      Execute(k, [ err ? false : stat ]);
    });
  }";
isSymlink = js "function(k, stat) {
    k(stat.isSymbolicLink());
  }";
writeFile = js "function(k, filename, data) {
    let fs = require('fs');
    fs.writeFile(filename, data, function(err){
      if (err) throw new Error(err);
      Execute(k, [ false ]);
    });
  }";
#parallel = js "function(k, f){
#  const result = [], queue = [];
#  f(function(){
#      (function loop(i) {
#        if (i >= queue.length) {
#            k(result)
#        } else {
#            let executed = false;
#            const chunk = queue[i];
#            chunk(function (rchunk) {
#                result.push(rchunk);
#                if (!executed)
#                {
#                    executed = true;
#                    loop(i + 1);
#                }
#            })
#            if (!executed) {
#                executed = true;
#                loop(i + 1);
#            }
#        }
#      })(0);
#      },
#  function pcall(kpcall, chunk){
#    queue.push(chunk);
#    kpcall(false);
#  })
#}";
#parallel = js "function(k, f){
#  const result = [], queue = [];
#  let i = 0;
#  f(function(){
#      queue.forEach(function (chunk) {
#          i++;
#          chunk(function(rchunk) {
#            result.push(rchunk);
#            if (i >= queue.length) {
#                k(result)
#            }
#          })
#      })},
#  function pcall(kpcall, chunk){
#    queue.push(chunk);
#    kpcall(false);
#  })
#}";
#parallel = js "function(k, f){
#  const result = [], queue = [];
#  let i = 0;
#
#  f(function(){
#        k(false);
#    },
#  function pcall(kpcall, chunk){
#    new Promise((resolve, reject) => {
#        i++;
#        chunk(resolve)
#    }).then(function(rchunk) {
#        i--;
#        result.push(rchunk);
#        if (i === 0) {
#            k(result);
#        }
#    }, function (error) {
#    });
#    kpcall(false);
#  })
#}";
parallel = js "function(k, f){
  const result = [];
  let i = 0, n = 0;

  f(function(){
        if (n === 0) k(false);
  }, function pcall(kpcall, chunk){
    i++;
    n++;
    setTimeout(() => {
        Execute(chunk,[function(rchunk) {
            i--;
            result.push(rchunk);
            if (i === 0)
            {
                k(result)
            }
        }])
    })
    kpcall(false);
  })
}";
